// Code generated by MockGen. DO NOT EDIT.
// Source: ./fast_node.go

// Package mock_iavl is a generated GoMock package.
package iavl

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// EncodedSize mocks base method.
func (m *MockNode) EncodedSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodedSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// EncodedSize indicates an expected call of EncodedSize.
func (mr *MockNodeMockRecorder) EncodedSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedSize", reflect.TypeOf((*MockNode)(nil).EncodedSize))
}

// getKey mocks base method.
func (m *MockNode) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// getKey indicates an expected call of getKey.
func (mr *MockNodeMockRecorder) getKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockNode)(nil).Key))
}

// getValue mocks base method.
func (m *MockNode) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// getValue indicates an expected call of getValue.
func (mr *MockNodeMockRecorder) getValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockNode)(nil).Value))
}

// getVersion mocks base method.
func (m *MockNode) Version() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int64)
	return ret0
}

// getVersion indicates an expected call of getVersion.
func (mr *MockNodeMockRecorder) getVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockNode)(nil).Version))
}

// setKey mocks base method.
func (m *MockNode) SetKey(key []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", key)
}

// setKey indicates an expected call of setKey.
func (mr *MockNodeMockRecorder) setKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockNode)(nil).SetKey), key)
}

// WriteBytes mocks base method.
func (m *MockNode) WriteBytes(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBytes", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBytes indicates an expected call of WriteBytes.
func (mr *MockNodeMockRecorder) WriteBytes(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBytes", reflect.TypeOf((*MockNode)(nil).WriteBytes), w)
}
