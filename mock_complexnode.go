// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/iavl (interfaces: ComplexNode)

// Package mock_iavl is a generated GoMock package.
package iavl

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockComplexNode is a mock of ComplexNode interface.
type MockComplexNode struct {
	ctrl     *gomock.Controller
	recorder *MockComplexNodeMockRecorder
}

// MockComplexNodeMockRecorder is the mock recorder for MockComplexNode.
type MockComplexNodeMockRecorder struct {
	mock *MockComplexNode
}

// NewMockComplexNode creates a new mock instance.
func NewMockComplexNode(ctrl *gomock.Controller) *MockComplexNode {
	mock := &MockComplexNode{ctrl: ctrl}
	mock.recorder = &MockComplexNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexNode) EXPECT() *MockComplexNodeMockRecorder {
	return m.recorder
}

// EncodedSize mocks base method.
func (m *MockComplexNode) EncodedSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodedSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// EncodedSize indicates an expected call of EncodedSize.
func (mr *MockComplexNodeMockRecorder) EncodedSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodedSize", reflect.TypeOf((*MockComplexNode)(nil).EncodedSize))
}

// GetKey mocks base method.
func (m *MockComplexNode) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockComplexNodeMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockComplexNode)(nil).Key))
}

// GetValue mocks base method.
func (m *MockComplexNode) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockComplexNodeMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockComplexNode)(nil).Value))
}

// GetVersion mocks base method.
func (m *MockComplexNode) Version() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockComplexNodeMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockComplexNode)(nil).Version))
}

// Height mocks base method.
func (m *MockComplexNode) Height() int8 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(int8)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockComplexNodeMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockComplexNode)(nil).Height))
}

// LeftHash mocks base method.
func (m *MockComplexNode) LeftHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeftHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// LeftHash indicates an expected call of LeftHash.
func (mr *MockComplexNodeMockRecorder) LeftHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeftHash", reflect.TypeOf((*MockComplexNode)(nil).LeftHash))
}

// LeftNode mocks base method.
func (m *MockComplexNode) LeftNode() *TreeNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeftNode")
	ret0, _ := ret[0].(*TreeNode)
	return ret0
}

// LeftNode indicates an expected call of LeftNode.
func (mr *MockComplexNodeMockRecorder) LeftNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeftNode", reflect.TypeOf((*MockComplexNode)(nil).LeftNode))
}

// PathToLeaf mocks base method.
func (m *MockComplexNode) PathToLeaf(arg0 *ImmutableTree, arg1 []byte) (PathToLeaf, *TreeNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathToLeaf", arg0, arg1)
	ret0, _ := ret[0].(PathToLeaf)
	ret1, _ := ret[1].(*TreeNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PathToLeaf indicates an expected call of PathToLeaf.
func (mr *MockComplexNodeMockRecorder) PathToLeaf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathToLeaf", reflect.TypeOf((*MockComplexNode)(nil).PathToLeaf), arg0, arg1)
}

// Persisted mocks base method.
func (m *MockComplexNode) Persisted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persisted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Persisted indicates an expected call of Persisted.
func (mr *MockComplexNodeMockRecorder) Persisted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persisted", reflect.TypeOf((*MockComplexNode)(nil).Persisted))
}

// RightNode mocks base method.
func (m *MockComplexNode) RightNode() *TreeNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RightNode")
	ret0, _ := ret[0].(*TreeNode)
	return ret0
}

// RightNode indicates an expected call of RightNode.
func (mr *MockComplexNodeMockRecorder) RightNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RightNode", reflect.TypeOf((*MockComplexNode)(nil).RightNode))
}

// SetHash mocks base method.
func (m *MockComplexNode) SetHash(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHash", arg0)
}

// SetHash indicates an expected call of SetHash.
func (mr *MockComplexNodeMockRecorder) SetHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHash", reflect.TypeOf((*MockComplexNode)(nil).SetHash), arg0)
}

// SetKey mocks base method.
func (m *MockComplexNode) SetKey(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", arg0)
}

// SetKey indicates an expected call of SetKey.
func (mr *MockComplexNodeMockRecorder) SetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockComplexNode)(nil).SetKey), arg0)
}

// SetLeftHash mocks base method.
func (m *MockComplexNode) SetLeftHash(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLeftHash", arg0)
}

// SetLeftHash indicates an expected call of SetLeftHash.
func (mr *MockComplexNodeMockRecorder) SetLeftHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLeftHash", reflect.TypeOf((*MockComplexNode)(nil).SetLeftHash), arg0)
}

// Size mocks base method.
func (m *MockComplexNode) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockComplexNodeMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockComplexNode)(nil).Size))
}

// WriteBytes mocks base method.
func (m *MockComplexNode) WriteBytes(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBytes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBytes indicates an expected call of WriteBytes.
func (mr *MockComplexNodeMockRecorder) WriteBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBytes", reflect.TypeOf((*MockComplexNode)(nil).WriteBytes), arg0)
}

// _hash mocks base method.
func (m *MockComplexNode) _hash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "_hash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// _hash indicates an expected call of _hash.
func (mr *MockComplexNodeMockRecorder) _hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "_hash", reflect.TypeOf((*MockComplexNode)(nil)._hash))
}

// calcBalance mocks base method.
func (m *MockComplexNode) calcBalance(arg0 *ImmutableTree) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "calcBalance", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// calcBalance indicates an expected call of calcBalance.
func (mr *MockComplexNodeMockRecorder) calcBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "calcBalance", reflect.TypeOf((*MockComplexNode)(nil).calcBalance), arg0)
}

// calcHeightAndSize mocks base method.
func (m *MockComplexNode) calcHeightAndSize(arg0 *ImmutableTree) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "calcHeightAndSize", arg0)
}

// calcHeightAndSize indicates an expected call of calcHeightAndSize.
func (mr *MockComplexNodeMockRecorder) calcHeightAndSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "calcHeightAndSize", reflect.TypeOf((*MockComplexNode)(nil).calcHeightAndSize), arg0)
}

// clone mocks base method.
func (m *MockComplexNode) clone(arg0 int64) *TreeNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "clone", arg0)
	ret0, _ := ret[0].(*TreeNode)
	return ret0
}

// clone indicates an expected call of clone.
func (mr *MockComplexNodeMockRecorder) clone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "clone", reflect.TypeOf((*MockComplexNode)(nil).clone), arg0)
}

// get mocks base method.
func (m *MockComplexNode) get(arg0 *ImmutableTree, arg1 []byte) (int64, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MockComplexNodeMockRecorder) get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockComplexNode)(nil).get), arg0, arg1)
}

// getByIndex mocks base method.
func (m *MockComplexNode) getByIndex(arg0 *ImmutableTree, arg1 int64) ([]byte, []byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getByIndex", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	return ret0, ret1
}

// getByIndex indicates an expected call of getByIndex.
func (mr *MockComplexNodeMockRecorder) getByIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getByIndex", reflect.TypeOf((*MockComplexNode)(nil).getByIndex), arg0, arg1)
}

// getHash mocks base method.
func (m *MockComplexNode) Hash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// getHash indicates an expected call of getHash.
func (mr *MockComplexNodeMockRecorder) getHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockComplexNode)(nil).Hash))
}

// getLeftNodeFromTree mocks base method.
func (m *MockComplexNode) getLeftNodeFromTree(arg0 *ImmutableTree) ComplexNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLeftNodeFromTree", arg0)
	ret0, _ := ret[0].(*TreeNode)
	return ret0
}

// getLeftNodeFromTree indicates an expected call of getLeftNodeFromTree.
func (mr *MockComplexNodeMockRecorder) getLeftNodeFromTree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLeftNodeFromTree", reflect.TypeOf((*MockComplexNode)(nil).getLeftNodeFromTree), arg0)
}

// getRightHash mocks base method.
func (m *MockComplexNode) RightHash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RightHash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// getRightHash indicates an expected call of getRightHash.
func (mr *MockComplexNodeMockRecorder) getRightHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RightHash", reflect.TypeOf((*MockComplexNode)(nil).RightHash))
}

// getRightNodeFromTree mocks base method.
func (m *MockComplexNode) getRightNodeFromTree(arg0 *ImmutableTree) ComplexNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRightNodeFromTree", arg0)
	ret0, _ := ret[0].(*TreeNode)
	return ret0
}

// getRightNodeFromTree indicates an expected call of getRightNodeFromTree.
func (mr *MockComplexNodeMockRecorder) getRightNodeFromTree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRightNodeFromTree", reflect.TypeOf((*MockComplexNode)(nil).getRightNodeFromTree), arg0)
}

// has mocks base method.
func (m *MockComplexNode) has(arg0 *ImmutableTree, arg1 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "has", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// has indicates an expected call of has.
func (mr *MockComplexNodeMockRecorder) has(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "has", reflect.TypeOf((*MockComplexNode)(nil).has), arg0, arg1)
}

// hashWithCount mocks base method.
func (m *MockComplexNode) hashWithCount() ([]byte, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hashWithCount")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// hashWithCount indicates an expected call of hashWithCount.
func (mr *MockComplexNodeMockRecorder) hashWithCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hashWithCount", reflect.TypeOf((*MockComplexNode)(nil).hashWithCount))
}

// isLeaf mocks base method.
func (m *MockComplexNode) Leaf() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leaf")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isLeaf indicates an expected call of isLeaf.
func (mr *MockComplexNodeMockRecorder) isLeaf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leaf", reflect.TypeOf((*MockComplexNode)(nil).Leaf))
}

// newTraversal mocks base method.
func (m *MockComplexNode) newTraversal(arg0 *ImmutableTree, arg1, arg2 []byte, arg3, arg4, arg5 bool) *traversal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newTraversal", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*traversal)
	return ret0
}

// newTraversal indicates an expected call of newTraversal.
func (mr *MockComplexNodeMockRecorder) newTraversal(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newTraversal", reflect.TypeOf((*MockComplexNode)(nil).newTraversal), arg0, arg1, arg2, arg3, arg4, arg5)
}

// setLeftNode mocks base method.
func (m *MockComplexNode) setLeftNode(arg0 ComplexNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setLeftNode", arg0)
}

// setLeftNode indicates an expected call of setLeftNode.
func (mr *MockComplexNodeMockRecorder) setLeftNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setLeftNode", reflect.TypeOf((*MockComplexNode)(nil).setLeftNode), arg0)
}

// setPersisted mocks base method.
func (m *MockComplexNode) SetPersisted(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPersisted", arg0)
}

// setPersisted indicates an expected call of setPersisted.
func (mr *MockComplexNodeMockRecorder) setPersisted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPersisted", reflect.TypeOf((*MockComplexNode)(nil).SetPersisted), arg0)
}

// setRightHash mocks base method.
func (m *MockComplexNode) SetRightHash(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRightHash", arg0)
}

// setRightHash indicates an expected call of setRightHash.
func (mr *MockComplexNodeMockRecorder) setRightHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRightHash", reflect.TypeOf((*MockComplexNode)(nil).SetRightHash), arg0)
}

// setRightNode mocks base method.
func (m *MockComplexNode) setRightNode(arg0 ComplexNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setRightNode", arg0)
}

// setRightNode indicates an expected call of setRightNode.
func (mr *MockComplexNodeMockRecorder) setRightNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setRightNode", reflect.TypeOf((*MockComplexNode)(nil).setRightNode), arg0)
}

// traverse mocks base method.
func (m *MockComplexNode) traverse(arg0 *ImmutableTree, arg1 bool, arg2 func(ComplexNode) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverse", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// traverse indicates an expected call of traverse.
func (mr *MockComplexNodeMockRecorder) traverse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverse", reflect.TypeOf((*MockComplexNode)(nil).traverse), arg0, arg1, arg2)
}

// traverseInRange mocks base method.
func (m *MockComplexNode) traverseInRange(arg0 *ImmutableTree, arg1, arg2 []byte, arg3, arg4, arg5 bool, arg6 func(ComplexNode) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "traverseInRange", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(bool)
	return ret0
}

// traverseInRange indicates an expected call of traverseInRange.
func (mr *MockComplexNodeMockRecorder) traverseInRange(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "traverseInRange", reflect.TypeOf((*MockComplexNode)(nil).traverseInRange), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// traversePost mocks base method.
func (m *MockComplexNode) TraversePost(arg0 *ImmutableTree, arg1 bool, arg2 func(ComplexNode) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraversePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// traversePost indicates an expected call of traversePost.
func (mr *MockComplexNodeMockRecorder) traversePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraversePost", reflect.TypeOf((*MockComplexNode)(nil).TraversePost), arg0, arg1, arg2)
}
